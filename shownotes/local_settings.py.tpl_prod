import os

BASE_DIR = os.path.dirname(os.path.dirname(__file__))

# Key used for cryptographic signing of sessions and so on. Make it long (50+ chars), keep it secret.
# https://docs.djangoproject.com/en/1.8/ref/settings/#std:setting-SECRET_KEY
SECRET_KEY = 'barz'

# ONLY set to True, if this is a development-config
DEBUG = True
TEMPLATE_DEBUG = True

# Key used for cryptographic signing of sessions and so on. Make it long (50+ chars), keep it secret.
# https://docs.djangoproject.com/en/1.8/ref/settings/#std:setting-SECRET_KEY
CORS_ORIGIN_WHITELIST = [
    'localhost',
    'localhost:9000',
    'snotes20.com:9000',
]

# full URL to the frontend
SITEURL = ''

# hostnames on which the API can be accessed, e.g. 'shownot.es'
# this is the hostname running the *backend*
ALLOWED_HOSTS = [
    'localhost'
]

# Various editor-configs. At the moment there is only etherpad-like ('EP').
EDITORS = {
    'EP': {
      # found in APIKEY.txt in the etherpad-directory
      'secret': '',
      # FULL url to etherpad-lite pads, e.g. https://localhost:9001/p
      'userurl': '',
      # FULL url to the etherpad-lite API, e.g. https://localhost:9001/api
      'apiurl': ''
    }
}

# Database settings. Only postgresql is supported at the moment.
# https://docs.djangoproject.com/en/dev/ref/databases/
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '',
        'USER': '',
        'PASSWORD': '',
        'HOST': '',
        'PORT': '5432',
    }
}

LOG_DIR = BASE_DIR+"/logs/"
LOGGING = {
    'version': 1,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(asctime)s %(message)s'
        },
    },
    'handlers': {
        'console':{
            'level': 'DEBUG',
            'formatter': 'verbose',
            'class': 'logging.StreamHandler',
        },
        'logfile-django': {
            'class': 'logging.handlers.WatchedFileHandler',
            'formatter': 'simple',
            'filename': LOG_DIR + 'django-exception.log',
        },
        'logfile-snotes20': {
            'class': 'logging.handlers.WatchedFileHandler',
            'formatter': 'simple',
            'filename': LOG_DIR + 'snotes20.log',
        },
        'logfile-notifyservices': {
            'class': 'logging.handlers.WatchedFileHandler',
            'formatter': 'simple',
            'filename': LOG_DIR + 'notifyservices.log',
        },
        'logfile-statistic': {
            'class': 'logging.handlers.WatchedFileHandler',
            'formatter': 'simple',
            'filename': LOG_DIR +'statistic.log',
        },
        'logfile-wordfrequency': {
            'class': 'logging.handlers.WatchedFileHandler',
            'formatter': 'simple',
            'filename': LOG_DIR +'wordfrequency.log',
        },
        'logfile-update-statistics': {
            'class': 'logging.handlers.WatchedFileHandler',
            'formatter': 'simple',
            'filename': LOG_DIR +'update-statistics.log',
        },
        'logfile-statistics-tasks': {
            'class': 'logging.handlers.WatchedFileHandler',
            'formatter': 'simple',
            'filename': LOG_DIR +'statistics-tasks.log',
        },
    },
    'loggers': {
        'snotes20.management.commands.importexternal': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'snotes20.management.commands.refreshdocstate': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'statistic.management.commands.update-statistics': {
            'handlers': ['logfile-update-statistics'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'statistic.management.commands.wordfrequency': {
            'handlers': ['logfile-wordfrequency'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'statistic.tasks': {
            'handlers': ['logfile-statistic-tasks'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django': {
            'handlers': ['logfile-django'],
            'level': 'DEBUG',
        },
        'snotes20': {
            'handlers': ['logfile-snotes20'],
            'level': 'DEBUG',
        },
        'notifyservices': {
            'handlers': ['logfile-notifyservices'],
            'level': 'DEBUG',
        },
        'statistic': {
            'handlers': ['logfile-statistic'],
            'level': 'DEBUG',
        },
    },
}


# URL to where STATIC_ROOT can be accessed via the web, e.g. '/static/'
STATIC_URL = '/static/'

# full path to a directory in which django can put static files (e.g. css for the admin-area), e.g. '/var/www/html/static'
STATIC_ROOT = BASE_DIR+STATIC_URL

# sub-path in which the API is run, if any, e.g. '/api/'
FORCE_SCRIPT_NAME = ''

# full path to the media directory, where we store user-content like podcast-covers, e.g. '/var/www/html/media'
# this must be accessible via the web and must match the setting in the frontends config.js
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR+MEDIA_URL


# set to True, if the API is run behind a reverse-proxy (e.g. apache on uberspace)
USE_X_FORWARDED_HOST = False

EMAIL_HOST = 'mail.goooogle.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'user'
EMAIL_HOST_PASSWORD = 'password'
EMAIL_USE_TLS = True

DEFAULT_FROM_EMAIL = 'noreply@localhost'

# number of podcasts to list as 'recent' at the top of the archive-page
ARCHIVE_RECENT_COUNT = 5

NOTIFYSERVICE = False
RABBITMQ_URI = 'amqp://guest:passwd@localhost:5672/%2F'
PRIVATE_API_SECRET = "1234"

IRC_ENABLED = False
IRC_NICK = 'example-bot-nick'
IRC_PASSWD = ''
IRC_REALNAME = 'Example Bot'
IRC_SERVER = 'irc.freenode.net'
IRC_PORT = 6667
IRC_CHANNELS = ["#shownotes",]

MAX_WORD_FREQUENCIES = 50
MAX_SIGIFICANT_WORDS = 30